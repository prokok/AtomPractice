=======================================================================================================================
<Atom Basics>
http://flight-manual.atom.io/getting-started/

1.Command Palette - Ctrl + Shift + P

2.
Open file - Ctrl + O
Save file - Ctrl + S
Create/Open a file through terminal: atom name.extension

3.
Opening Directories: Ctrl + Shift + A
Create/Open a directories through terminal: atom ../directory name

4.
Hide Tree View - Ctrl + \
Hide Tree View - tree-view:toggle Command Palette

5.
Tree View Focus - Alt + \
	A : Adddelete files and folders
	M : Move delete files and folders
	Delete : delete files and folders

6.
Opening a File in a Project

Ctrl + T or Ctrl + P : Fuzzy Finder will pop up. search for any file in your project opened in Atom by typing parts of the path.
Ctrl + B : search through only the files currently opened (rather than every file in your project) . This searches through your "buffers" or open files.
Ctrl + Shift + B : searches only through the files which are new or have been modified since your last Git commit.


The fuzzy finder uses the core.ignoredNames, fuzzy-finder.ignoredNames and core.excludeVCSIgnoredPaths configuration settings to filter out files and folders that will not be shown. If you have a project with tons of files you don't want it to search through, you can add patterns or paths to either of these config settings or your standard .gitignore files. We'll learn more about config settings in Global Configuration Settings, but for now you can easily set these in the Settings View under Core Settings.

Both core.ignoredNames and fuzzy-finder.ignoredNames are interpreted as glob patterns as implemented by the minimatch Node module.

-Configuration Setting Notation-

Sometimes you'll see us refer to configuration settings all spelled out like "Ignored Names in Core Settings". Other times you'll see us use the shorthand name like core.ignoredNames. Both of these refer to the same thing. The shorthand is the package name, then a dot ., followed by the "camel-cased" name of the setting.

If you have a phrase you want to camel-case, follow these steps:
1. Lowercase the first word
2. Capitalize the first letter in all other words
3. Remove the spaces
So "Ignored Names" becomes "ignoredNames".

==================================================================================================
<Using Atom>

1. Packages
Packages Settings
Theme Settings
Ctrl + , : settings

apm view <package_name> : see more information about a specific package.
Install Packages through Terminal : apm help install
apm install <package_name> : to install the latest version.
apm install <package_name>@<package_version> : to install a specific version.
apm search <package_name> : search the package registry for a search term.

2. Movings

Ctrl + Left - Move to the beginning of word
Ctrl + Right - Move to the end of word
Home - Move to the first character of the current line
End - Move to the end of the line
Ctrl + Home - Move to the top of the file
Ctrl + End - Move to the bottom of the file

Ctrl + G - Move directly to a specific line (and column) number with . Also use the row:column syntax to jump to a character in that line as well.

-Navigating by Symbols-
You can also jump around a little more informatively with the Symbols View. To jump to a symbol such as a method definition.
Ctrl + R - Opens a list of all symbols in the current file
TAG Files
BOOKMARKS

3. Atom Selections

Shift+Up - Select up
Shift+Down - Select down
Shift+Left - Select previous character
Shift+Right - Select next character
Ctrl+Shift+Left - Select to beginning of word
Ctrl+Shift+Right - Select to end of word
Shift+End - Select to end of line
Shift+Home - Select to first character of line
Ctrl+Shift+Home - Select to top of file
Ctrl+Shift+End - Select to bottom of file

In addition to the cursor movement selection commands, there are also a few commands that help with selecting specific areas of content.

Ctrl+A - Select the entire contents of the file
Ctrl+L - Select the entire line

4. Editing and Deleting Text

Ctrl+J - Join the next line to the end of the current line
Ctrl+Up/Down - Move the current line up or down
Ctrl+Shift+D - Duplicate the current line
Ctrl+K Ctrl+U - Upper case the current word
Ctrl+K Ctrl+L - Lower case the current word

Ctrl+Shift+K - Delete current line
Ctrl+Backspace - Delete to beginning of word
Ctrl+Delete - Delete to end of word

Ctrl+Click - Add a new cursor at the clicked location
Alt+Ctrl+Up/Down - Add another cursor above/below the current cursor
Ctrl+D - Select the next word in the document that is the same as the currently selected word
Alt+F3 - Select all words in the document that are the same as the currently selected word

5. Find and REPLACE

Ctrl + F - Search within a buffer
Ctrl + Shift + F - Search the entire project

6. Snippet

Snippets are an incredibly powerful way to quickly generate commonly needed code syntax from a shortcut.

The idea is that you can type something like habtm and then press the Tab key and it will expand into has_and_belongs_to_many.

Many Core and Community packages come bundled with their own snippets that are specific to it. For example, the language-html package that provides support for HTML syntax highlighting and grammar comes with dozens of snippets to create many of the various HTML tags you might want to use. If you create a new HTML file in Atom, you can type html and then press Tab and it will expand to:

<html>
  <head>
    <title></title>
  </head>
  <body>

  </body>
</html>

It will also position the cursor in the middle of the title tag so you can immediately start filling out the tag. Many snippets have multiple focus points that you can move through with the Tab key as well - for instance, in the case of this HTML snippet, once you've filled out the title tag you can press Tab and the cursor will move to the middle of the body tag.

7. Autocomplete
The autocomplete system lets you view and insert possible completions in the editor using Tab or Enter.

8. Folding
If you want to see an overview of the structure of the code file you're working on, folding can be a helpful tool. Folding hides blocks of code such as functions or looping blocks in order to simplify what is on your screen.

You can fold blocks of code by clicking the arrows that appear when you hover your mouse cursor over the gutter. You can also fold and unfold from the keyboard with the Alt+Ctrl+[ and Alt+Ctrl+] keybindings.

To fold everything, use Alt+Ctrl+Shift+[ and to unfold everything use Alt+Ctrl+Shift+]. You can also fold at a specific indentation level with Ctrl+K Ctrl+0-9 where the number is the indentation depth.

Finally, you can fold arbitrary sections of your code or text by making a selection and then typing Alt+Ctrl+F or choosing "Fold Selection" in the Command Palette.

9. Panes

You can split any editor pane horizontally or vertically by using Ctrl+K Up/Down/Left/Right where the direction key is the direction to split the pane. Once you have a split pane, you can switch between them with Ctrl+K Ctrl+Up/Down/Left/Right where the direction is the direction the focus should move to.

Each pane has its own "pane items", which are represented by tabs. You can move the files from pane to pane by dragging them with the mouse and dropping them in the pane you want that file to be in.

If you don't like using tabs, you don't have to. You can disable the tabs package and each pane will still support multiple pane items. You just won't have tabs to use to click between them.
To close a pane, you can close all pane items with Ctrl+W. You can configure whether panes auto-close when empty in the Settings View with the "Remove Empty Panes" setting under Core Settings.

10. Pending Pane Items

"Pending Pane Items" were formerly referred to as "Preview Tabs"

When you open a new file by single-clicking in the Tree View, it will open in a new tab with an italic title. This indicates that the file is "pending". When a file is pending, it will be replaced by the next pending file that is opened. This allows you to click through a bunch of files to find something without having to go back and close them all.

You can confirm a pending file by doing any of the following:

Double-clicking the tab of the file
Double-clicking the file in the tree view
Editing the contents of the file
Saving the file
You can also open a file already confirmed by double-clicking it in the tree view instead of single-clicking it.

11. Grammar

The "grammar" of a file is what language Atom has associated with that file. Types of grammars would include "Java" or "GitHub-Flavored Markdown". We looked at this a bit when we created some snippets in Snippets.

When you load a file, Atom does a little work to try to figure out what type of file it is. Largely this is accomplished by looking at its file extension (.md is generally a Markdown file, etc), though sometimes it has to inspect the content a bit to figure it out.

When you open a file and Atom can't determine a grammar for the file, it will default to "Plain Text", which is the simplest one. If it does default to "Plain Text", picks the wrong grammar for the file, or if for any reason you wish to change the selected grammar, you can pull up the Grammar Selector with Ctrl+Shift+L.

When the grammar of a file is changed, Atom will remember that for the current session.
The Grammar Selector functionality is implemented in the grammar-selector package.

12. Version Control in atom

Version control is an important aspect of any project and Atom comes with basic Git and GitHub integration built in.
In order to use version control in Atom, the project root needs to contain the Git repository.

Checkout HEAD revision

The Alt+Ctrl+Z keybinding checks out the HEAD revision of the file in the editor.
This is a quick way to discard any saved and staged changes you've made and restore the file to the version in the HEAD commit. This is essentially the same as running git checkout HEAD -- <path> and git reset HEAD -- <path> from the command line for that path.
This command goes onto the undo stack so you can use Ctrl+Z afterwards to restore the previous contents.

Git status list

Atom ships with the fuzzy-finder package which provides Ctrl+T to quickly open files in the project and Ctrl+B to jump to any open editor. The package also provides Ctrl+Shift+B which displays a list of all the untracked and modified files in the project. These will be the same files that you would see on the command line if you ran git status.
An icon will appear to the right of each file letting you know whether it is untracked or modified.

Commit editor

Atom can be used as your Git commit editor and ships with the language-git package which adds syntax highlighting to edited commit, merge, and rebase messages.	

You can configure Atom to be your Git commit editor with the following command:
The language-git package will help remind you to be brief by colorizing the first lines of commit messages when they're longer than 50 or 65 characters.

Status bar icons

The status-bar package that ships with Atom includes several Git decorations that display on the right side of the status bar:
The currently checked out branch name is shown with the number of commits the branch is ahead of or behind its upstream branch. An icon is added if the file is untracked, modified, or ignored. The number of lines added and removed since the file was last committed will be displayed as well.

Line diffs

The included git-diff package colorizes the gutter next to lines that have been added, edited, or removed.
Git line diff indications
This package also adds Alt+G Down and Alt+G Up keybindings that allow you to move the cursor to the next or previous diff in the current editor.

Open on GitHub

If the project you're working on is on GitHub, there are also some very useful integrations you can use. Most of the commands will take the current file you're viewing and open a view of that file on GitHub - for instance, the blame or commit history of that file.

Alt+G O - Open file on GitHub
Alt+G B - Open Blame view of file on GitHub
Alt+G H - Open History view of file on GitHub
Alt+G C - Copy the URL of the current file on GitHub to the clipboard
Alt+G R - Branch compare on GitHub
The branch comparison shows you the commits that are on the branch you're currently working on locally that are not on the mainline branch

13. Github Pacakges

The github package brings Git and GitHub integration right inside Atom.

Initialize
Clone
Branch
Stage
Discard
Commit
Amend
Push
Pull
Resolve conflicts
View Pull Requests

Most of the functionality lives in the Git and GitHub panel. There are different ways to access them, probably the most common way is through their keybindings:

Open the Git panel: Ctrl+9
Open the GitHub panel: Ctrl+8

-Initialize
In case a project doesn't have a Git repository yet, you can create one from the Git panel.

-Clone
To clone a repository, run the GitHub: Clone command. In the dialog paste a URL of a repository and click "Clone". A new project will get added to the Tree View.

-Branch
To open the branch tooltip, click the branch icon in the Status Bar. From there you can to create or switch branches.

-Stage
After making some changes, stage anything you want to be part of the next commit. Choose between staging...

All changes: Click the "Stage All" button in the "Unstaged Changes" bar.
Files: Double-click a file or select a file and press Enter.
Hunk: Click on the "Stage Hunk" button or select a hunk and press Enter.
Lines: Click on a line (or drag on multiple lines) to select, then click on the "Stage Selection" button. Or use the / key to toggle from hunk mode to line mode, then press Enter to stage just a single line.
Use the Left or Right arrow key to switch between file list and the diff view. Unstaging can be done in the same way.

-Discard

If you no longer want to keep some changes, you can discard them. It's similar to staging, but accessible behind a context menu.

All changes: Right-click the "Unstaged Changes" bar and choose "Discard All Changes".
Files: Right-click a file (or multiple) and choose "Discard Changes".
Hunk: Click on the trash icon in the top bar of a hunk.
Lines: Right-click on a line (or multiple) and choose "Discard Selection".

- Commit

Once you've staged your changes, enter a commit message. Feel free to describe the commit in more detail after leaving an empty line. Finalize by clicking the Commit button.

If you need more space, click the expand icon at the bottom right. It will open a commit editor in the center.

- Amend previous commit
In case you forgot to commit a change and would like to add it to your previous commit, clicking the "Amend" checkbox. Now you can stage more changes or adjust the commit message.

===================================================================================================================
<Hacking Atom> <Behind Atom> requires JavaScript and CSS.
